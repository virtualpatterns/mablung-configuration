{"version":3,"sources":["../../source/library/configuration.js"],"names":["Clone","FileSystem","FileSystemPath","Is","JSON5","Merge","ObjectPath","PATTERN_JSON","Configuration","constructor","root","_root","load","value","_load","merge","string","path","resolve","test","parse","readFileSync","module","default","function","has","parameter","apply","get","set","reduce","accumulator","getOption","getParameter","_parameterObjectToArray","_mergeParameter","array","_parameterArrayToObject","Object","keys","filter","name","map","flat","redact","censor","_value","omit","del"],"mappings":"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","sourcesContent":["import Clone from 'clone'\nimport FileSystem from 'fs'\nimport FileSystemPath from 'path'\nimport Is from '@pwn/is'\nimport JSON5 from 'json5'\nimport Merge from 'deepmerge'\nimport ObjectPath from 'object-path'\n\nconst PATTERN_JSON = /^.+\\.json5?$/i\n\nclass Configuration {\n\n  constructor(root = {}) {\n    this._root = root\n  }\n\n  get root() {\n    return this._root\n  }\n\n  async load(value) {\n    this._root = await this._load(value)\n  }\n\n  async merge(value) {\n    this._root = Configuration.merge(this._root, await this._load(value))\n  }\n\n  async _load(value) {\n\n    if (Is.string(value)) {\n\n      let path = FileSystemPath.resolve(value)\n\n      if (PATTERN_JSON.test(path)) {\n        return JSON5.parse(FileSystem.readFileSync(path, { 'encoding': 'utf-8' }))\n      }\n      else {\n\n        let module = null\n        module = await import(path)\n        module = module.default ? module.default : module\n\n        return Is.function(module) ? module(this) : module\n\n      }\n\n    } else {\n      return value\n    }\n\n  }\n\n  has(...parameter) {\n    return ObjectPath.has.apply(ObjectPath, [this._root, ...parameter])\n  }\n\n  get(...parameter) {\n    return ObjectPath.get.apply(ObjectPath, [this._root, ...parameter])\n  }\n\n  set(...parameter) {\n    return ObjectPath.set.apply(ObjectPath, [this._root, ...parameter])\n  }\n\n  static merge(...parameter) {\n    // Merge a set of objects\n    return parameter.reduce((accumulator, parameter) => Merge(accumulator, parameter), {})\n  }\n\n  static getOption(...parameter) {\n    return this.merge(...parameter)\n  }\n\n  static getParameter(...parameter) {\n    // Combine the below\n    return this._parameterObjectToArray(this._mergeParameter(...parameter))\n  }\n\n  static _mergeParameter(...parameter) {\n    // Merge a set of objects or arrays so that\n    // { 'a': true, 'b': false, 'c': 'abc' } and [ 'b', 'd', 'e', 'f' ] and ...\n    // becomes { 'a': true, 'b': true, 'c': 'abc', 'd': true, 'e': true, 'f': true }\n    return parameter.reduce((accumulator, parameter) => Merge(accumulator, Is.array(parameter) ? this._parameterArrayToObject(parameter) : parameter), {})\n  }\n\n  static _parameterArrayToObject(value) {\n    // Convert a parameter array of [ 'a', 'b', 'c' ] \n    // into an object { 'a': true, 'b': true, 'c': true }\n    return value.reduce((accumulator, value) => { \n      accumulator[value] = true \n      return accumulator\n    }, {})\n  }\n\n  static _parameterObjectToArray(value) {\n    // Convert a parameter object { 'a': true, 'b': false, 'c': 'abc' }\n    // into an array [ 'a', 'c', 'abc' ]\n    return Object.keys(value)\n      .filter((name) => value[name]) // remove any name/value pairs where value is falsy\n      .map((name) => Is.string(value[name]) ? [ name, value[name] ] : name) // separate name/value pairs into [ name, value ] or just name if it's not a string\n      .flat()\n  }\n\n  static redact(value, path, censor = '**********') {\n\n    let _value = null\n    _value = Clone(value)\n\n    ObjectPath.set(_value, path, censor)\n\n    return _value\n\n  }\n\n  static omit(value, path) {\n\n    let _value = null\n    _value = Clone(value)\n\n    ObjectPath.del(_value, path)\n\n    return _value\n\n  }\n\n}\n\nexport { Configuration }\n"],"file":"configuration.js"}