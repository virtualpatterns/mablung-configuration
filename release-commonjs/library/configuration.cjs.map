{"version":3,"sources":["../../source/library/configuration.js"],"names":["PATTERN_JSON","Configuration","constructor","root","_root","load","value","_load","merge","Is","string","path","FileSystemPath","resolve","test","JSON5","parse","FileSystem","readFileSync","module","default","functionOrAsyncFunction","has","parameter","ObjectPath","apply","get","set","reduce","accumulator","getOption","getParameter","_parameterObjectToArray","_mergeParameter","array","_parameterArrayToObject","Object","entries","filter","boolean","map","name","flat","redact","censor","_value","omit","del"],"mappings":"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","sourcesContent":["import Clone from 'clone'\nimport FileSystem from 'fs'\nimport FileSystemPath from 'path'\nimport { Is } from '@virtualpatterns/mablung-is'\nimport JSON5 from 'json5'\nimport Merge from 'deepmerge'\nimport ObjectPath from 'object-path'\n// import URL from 'url'\n\nconst PATTERN_JSON = /^.+\\.json5?$/i\n\nclass Configuration {\n\n  constructor(root = {}) {\n    this._root = root\n  }\n\n  get root() {\n    return this._root\n  }\n\n  async load(value) {\n    this._root = await this._load(value)\n  }\n\n  async merge(value) {\n    this._root = Configuration.merge(this._root, await this._load(value))\n  }\n\n  async _load(value) {\n\n    if (Is.string(value)) {\n\n      let path = FileSystemPath.resolve(value)\n\n      if (PATTERN_JSON.test(path)) {\n        return JSON5.parse(FileSystem.readFileSync(path, { 'encoding': 'utf-8' }))\n      }\n      else {\n\n        let module = null\n        module = await import(path) // URL.pathToFileURL(path))\n        module = module.default || module\n\n        if (Is.functionOrAsyncFunction(module)) {\n\n          // let returnValue = null\n          // returnValue = module(this)\n          // returnValue = returnValue instanceof Promise ? await returnValue : returnValue\n\n          return await module(this) // returnValue\n\n        } else {\n          return module\n        }\n\n      }\n\n    } else {\n      return value\n    }\n\n  }\n\n  has(...parameter) {\n    return ObjectPath.has.apply(ObjectPath, [this._root, ...parameter])\n  }\n\n  get(...parameter) {\n    return ObjectPath.get.apply(ObjectPath, [this._root, ...parameter])\n  }\n\n  set(...parameter) {\n    return ObjectPath.set.apply(ObjectPath, [this._root, ...parameter])\n  }\n\n  static merge(...parameter) {\n    // Merge a set of objects\n    return parameter.reduce((accumulator, parameter) => Merge(accumulator, parameter), {})\n  }\n\n  static getOption(...parameter) {\n    return this.merge(...parameter)\n  }\n\n  static getParameter(...parameter) {\n    // Combine the below\n    return this._parameterObjectToArray(this._mergeParameter(...parameter))\n  }\n\n  static _mergeParameter(...parameter) {\n    // Merge a set of objects or arrays so that\n    // { 'a': true, 'b': false, 'c': 'abc' } and [ 'b', 'd', 'e', 'f' ] and ...\n    // becomes { 'a': true, 'b': true, 'c': 'abc', 'd': true, 'e': true, 'f': true }\n    return parameter.reduce((accumulator, parameter) => Merge(accumulator, Is.array(parameter) ? this._parameterArrayToObject(parameter) : parameter), {})\n  }\n\n  static _parameterArrayToObject(value) {\n    // Convert a parameter array of [ 'a', 'b', 'c' ] \n    // into an object { 'a': true, 'b': true, 'c': true }\n    return value.reduce((accumulator, value) => { \n      accumulator[value] = true \n      return accumulator\n    }, {})\n  }\n\n  static _parameterObjectToArray(value) {\n    // Convert a parameter object { 'a': true, 'b': false, 'c': 'abc', 'd': 1, 'e': 0 }\n    // into an array [ 'a', 'c', 'abc', 'd', 1, 'e', 0 ]\n    return Object.entries(value) // returns [ [ name, value ], [ name, value ], ... ]\n      .filter(([ , value ]) => Is.boolean(value) ? value : true) // if value is a boolean, filter out false values\n      .map(([ name, value ]) => Is.boolean(value) ? [ name ]: [ name, value ]) // if value is a boolean return only [ name ]\n      .flat()\n  }\n\n  static redact(value, path, censor = '**********') {\n\n    let _value = null\n    _value = Clone(value)\n\n    ObjectPath.set(_value, path, censor)\n\n    return _value\n\n  }\n\n  static omit(value, path) {\n\n    let _value = null\n    _value = Clone(value)\n\n    ObjectPath.del(_value, path)\n\n    return _value\n\n  }\n\n}\n\nexport { Configuration }\n"],"file":"configuration.cjs"}