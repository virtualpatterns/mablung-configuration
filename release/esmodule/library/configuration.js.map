{"version":3,"sources":["../../../source/esmodule/library/configuration.js"],"names":[],"mappings":"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","file":"configuration.js","sourcesContent":["import Clone from 'clone'\nimport FileSystem from 'fs'\nimport FileSystemPath from 'path'\nimport { Is } from '@virtualpatterns/mablung-is'\nimport JSON5 from 'json5'\nimport Merge from 'deepmerge'\nimport ObjectPath from 'object-path'\n// import URL from 'url'\n\nconst PATTERN_JSON = /^.+\\.json5?$/i\n\nclass Configuration {\n\n  constructor(root = {}) {\n    this._root = root\n  }\n\n  get root() {\n    return this._root\n  }\n\n  async load(value) {\n    this._root = await this._load(value)\n  }\n\n  async merge(value) {\n    this._root = Configuration.merge(this._root, await this._load(value))\n  }\n\n  async _load(value) {\n\n    if (Is.string(value)) {\n\n      let path = FileSystemPath.resolve(value)\n\n      if (PATTERN_JSON.test(path)) {\n        return JSON5.parse(FileSystem.readFileSync(path, { 'encoding': 'utf-8' }))\n      }\n      else {\n\n        let module = null\n        module = await import(path) // URL.pathToFileURL(path))\n        module = module.default || module\n\n        if (Is.functionOrAsyncFunction(module)) {\n\n          // let returnValue = null\n          // returnValue = module(this)\n          // returnValue = returnValue instanceof Promise ? await returnValue : returnValue\n\n          return await module(this) // returnValue\n\n        } else {\n          return module\n        }\n\n      }\n\n    } else {\n      return value\n    }\n\n  }\n\n  has(...parameter) {\n    return ObjectPath.has.apply(ObjectPath, [this._root, ...parameter])\n  }\n\n  get(...parameter) {\n    return ObjectPath.get.apply(ObjectPath, [this._root, ...parameter])\n  }\n\n  set(...parameter) {\n    return ObjectPath.set.apply(ObjectPath, [this._root, ...parameter])\n  }\n\n  static merge(...parameter) {\n    // Merge a set of objects\n    return parameter.reduce((accumulator, parameter) => Merge(accumulator, parameter), {})\n  }\n\n  static getOption(...parameter) {\n    return this.merge(...parameter)\n  }\n\n  static getParameter(...parameter) {\n    // Combine the below\n    return this._parameterObjectToArray(this._mergeParameter(...parameter))\n  }\n\n  static _mergeParameter(...parameter) {\n    // Merge a set of objects or arrays so that\n    // { 'a': true, 'b': false, 'c': 'abc' } and [ 'b', 'd', 'e', 'f' ] and ...\n    // becomes { 'a': true, 'b': true, 'c': 'abc', 'd': true, 'e': true, 'f': true }\n    return parameter.reduce((accumulator, parameter) => Merge(accumulator, Is.array(parameter) ? this._parameterArrayToObject(parameter) : parameter), {})\n  }\n\n  static _parameterArrayToObject(value) {\n    // Convert a parameter array of [ 'a', 'b', 'c' ] \n    // into an object { 'a': true, 'b': true, 'c': true }\n    return value.reduce((accumulator, value) => { \n      accumulator[value] = true \n      return accumulator\n    }, {})\n  }\n\n  static _parameterObjectToArray(value) {\n    // Convert a parameter object { 'a': true, 'b': false, 'c': 'abc', 'd': 1, 'e': 0 }\n    // into an array [ 'a', 'c', 'abc', 'd', 1, 'e', 0 ]\n    return Object.entries(value) // returns [ [ name, value ], [ name, value ], ... ]\n      .filter(([ , value ]) => Is.boolean(value) ? value : true) // if value is a boolean, filter out false values\n      .map(([ name, value ]) => Is.boolean(value) ? [ name ]: [ name, value ]) // if value is a boolean return only [ name ]\n      .flat()\n  }\n\n  static redact(value, path, censor = '**********') {\n\n    let _value = null\n    _value = Clone(value)\n\n    ObjectPath.set(_value, path, censor)\n\n    return _value\n\n  }\n\n  static omit(value, path) {\n\n    let _value = null\n    _value = Clone(value)\n\n    ObjectPath.del(_value, path)\n\n    return _value\n\n  }\n\n}\n\nexport { Configuration }\n"]}