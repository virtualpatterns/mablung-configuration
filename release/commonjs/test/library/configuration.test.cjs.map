{"version":3,"sources":["../../../../source/esmodule/test/library/configuration.test.js"],"names":[],"mappings":"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","file":"configuration.test.cjs","sourcesContent":["import Path from 'path'\nimport Test from 'ava'\n\nimport { Configuration } from '../../index.js'\n\n// const FilePath = __filePath\n// const FolderPath = Path.dirname(FilePath)\nconst Require = __require // __require is replaced by @virtualpatterns/mablung-babel-plugin-replace\n\nTest('Configuration(object)', (test) => {\n  test.is((new Configuration({ 'a': 1 })).get('a'), 1)\n})\n\nTest('Configuration.load(object)', async (test) => {\n\n  let configuration = new Configuration({ 'a': 1 })\n  await configuration.load({ 'b' : 2 })\n\n  test.false(configuration.has('a'))\n  test.is(configuration.get('b'), 2)\n\n})\n\n;[\n  [ Require.resolve('./resource/configuration/load/path/load0.js'), Require.resolve('./resource/configuration/load/path/load1.js') ],\n  [ Require.resolve('./resource/configuration/load/path/load0.json'), Require.resolve('./resource/configuration/load/path/load1.json') ],\n  [ Require.resolve('./resource/configuration/load/path/load0.json5'), Require.resolve('./resource/configuration/load/path/load1.json5') ],\n  [ Require.resolve('./resource/configuration/load/path/load2.js'), Require.resolve('./resource/configuration/load/path/load3.js') ]\n].forEach(([ loadFileName0, loadFileName1 ]) => {\n\n  Test(`Configuration.load('${Path.relative(Path.dirname(loadFileName0), loadFileName0)}'), Configuration.load('${Path.relative(Path.dirname(loadFileName1), loadFileName1)}')`, async (test) => {\n\n    let configuration = new Configuration()\n    await configuration.load(loadFileName0)\n    await configuration.load(loadFileName1)\n  \n    test.false(configuration.has('a'))\n    test.is(configuration.get('b'), 2)\n  \n  })\n\n})\n\nTest('Configuration.merge(object)', async (test) => {\n\n  let configuration = new Configuration({ 'a': 1 })\n  await configuration.merge({ 'b' : 2 })\n\n  test.is(configuration.get('a'), 1)\n  test.is(configuration.get('b'), 2)\n\n})\n\n;[\n  [ Require.resolve('./resource/configuration/merge/path/load.js'), Require.resolve('./resource/configuration/merge/path/merge.js') ],\n  [ Require.resolve('./resource/configuration/merge/path/load.json'), Require.resolve('./resource/configuration/merge/path/merge.json') ],\n  [ Require.resolve('./resource/configuration/merge/path/load.json5'), Require.resolve('./resource/configuration/merge/path/merge.json5') ]\n].forEach(([ loadFileName, mergeFileName ]) => {\n\n  Test(`Configuration.load('${Path.relative(Path.dirname(loadFileName), loadFileName)}'), Configuration.merge('${Path.relative(Path.dirname(mergeFileName), mergeFileName)}')`, async (test) => {\n\n    let configuration = new Configuration()\n    await configuration.load(loadFileName)\n    await configuration.merge(mergeFileName)\n  \n    test.is(configuration.get('a'), 1)\n    test.is(configuration.get('b'), 2)\n  \n  })\n\n\n})\n\nTest('Configuration.has(string)', (test) => {\n  test.true((new Configuration({ 'a': 1 })).has('a'))\n})\n\nTest('Configuration.get(string[, defaultValue])', (test) => {\n\n  let configuration = new Configuration({ 'a': 1 })\n\n  test.is(configuration.get('a'), 1)\n  test.is(configuration.get('b', 0), 0)\n  test.is(configuration.get('c'), undefined)\n\n})\n\nTest('Configuration.set(string, value)', (test) => {\n\n  let configuration = new Configuration({ 'a': 1 })\n  configuration.set('b', 2)\n\n  test.is(configuration.get('b', 0), 2)\n\n})\n\nTest('Configuration.getOption(option0, option1, option2)', (test) => {\n\n  let option0 = { 'a': 1 }\n  let option1 = { 'b': 2 }\n  let option2 = { 'a': false, 'c': 3 }\n\n  let option4 = Configuration.getOption(option0, option1, option2)\n\n  test.false(option4.a)\n  test.is(option4.b, 2)\n  test.is(option4.c, 3)\n\n})\n\nTest('Configuration.getParameter(parameter0, parameter1, parameter2)', (test) => {\n\n  let parameter0 = { 'a': '1' }\n  let parameter1 = [ 'b', 'c' ]\n  let parameter2 = { 'd': '4', 'c': '5' }\n\n  let actualValue = Configuration.getParameter(parameter0, parameter1, parameter2)\n  let expectedValue = [ 'a', '1', 'b', 'c', '5', 'd', '4' ]\n\n  test.log(actualValue)\n\n  test.is(actualValue.length, 7)\n  test.deepEqual(actualValue, expectedValue)\n\n})\n\nTest('Configuration.getParameter({ \\'a\\': 0 })', (test) => {\n\n  let parameter0 = { 'a': 0 }\n\n  let actualValue = Configuration.getParameter(parameter0)\n  let expectedValue = [ 'a', 0 ]\n\n  test.is(actualValue.length, 2)\n  test.deepEqual(actualValue, expectedValue)\n\n})\n\nTest('Configuration.getParameter({ \\'a\\': 1 })', (test) => {\n\n  let parameter0 = { 'a': 1 }\n\n  let actualValue = Configuration.getParameter(parameter0)\n  let expectedValue = [ 'a', 1 ]\n\n  test.is(actualValue.length, 2)\n  test.deepEqual(actualValue, expectedValue)\n\n})\n\nTest('Configuration.redact(object, string[, string])', (test) => {\n\n  let object = { 'a': { 'b': 2, 'c': 3 } }\n\n  let actualValue0 = Configuration.redact(object, 'a.b')\n  let expectedValue0 = { 'a': { 'b': '**********', 'c': 3 } }\n\n  test.deepEqual(actualValue0, expectedValue0)\n\n  let actualValue1 = Configuration.redact(object, 'a.b', 0)\n  let expectedValue1 = { 'a': { 'b': 0, 'c': 3 } }\n\n  test.deepEqual(actualValue1, expectedValue1)\n\n  let actualValue2 = object\n  let expectedValue2 = { 'a': { 'b': 2, 'c': 3 } }\n\n  test.deepEqual(actualValue2, expectedValue2)\n\n})\n\nTest('Configuration.omit(object, string)', (test) => {\n\n  let object = { 'a': { 'b': 2, 'c': 3 } }\n\n  let actualValue0 = Configuration.omit(object, 'a.b')\n  let expectedValue0 = { 'a': { 'c': 3 } }\n\n  test.deepEqual(actualValue0, expectedValue0)\n\n})\n"]}